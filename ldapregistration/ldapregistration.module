<?php
// $Id $

/**
 * @file ldapregistrarion.module
 *
 * The LDAP Registration module adds support for registration directly into
 * LDAP. If you use it along with ldapauth and ldapdata you can implement a
 * single sign on between multiple drupal sites, with the LDAP directory as
 * the central user repository for username, password, and email address.
 */
 
include_once('ldap_integration/libdebug.php');
include_once('ldap_integration/LDAPInterface.php');

// Private constants (default values).
define('LDAP_DEFAULT_OBJECTCLASSES', 'top,account,inetOrgPerson');
define('LDAP_DEFAULT_REGISTER_SERVERS', array());
define('LDAP_DEFAULT_DELETE_LDAP_ENTRIES', FALSE);

/*********************************
 *       1. Drupal hooks         *
 *********************************/
/**
 * Implements hook_help()
 */
function ldapregistration_help($section) {
  $output = '';

  switch ($section) {
    case 'admin/modules#ldapregistration':
      $output = 'ldapregistration';
      break;
    case 'admin/modules#description':
    case 'admin/help#ldapregistration':
      $output = t('Allows for registration of new users in an LDAP directory.');
      break;
    case 'user/help#ldapregistration':
      $output = t('<p>If you are registered in %org\'s LDAP directory, you\'ll
                   probably be able to login this site by using your LDAP login
                   and password</p>', array('%org' => variable_get('ldap_org_name', LDAP_DEFAULT_ORG)));
      break;
  }

  return $output;
}

/**
 * Implements hook_menu()
 */
function ldapregistration_menu($may_cache) {
  $items = array();
  
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/ldapregistration',
      'title' => t('LDAP Registration'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('ldapregistration_settings'),
      'access' => user_access('administer ldap modules'),
      ); 
  }
  return $items;
}

/**
 * Implements hook_form_alter()
 */
function ldapregistration_form_alter($form_id, &$form) {
  switch($form_id) {
    case 'user_confirm_delete':
      $offset = array_search('confirm', array_keys($form));
      $form_new_items = array (
        'delete_ldap_entry' => array(
          '#type' => 'checkbox',
          '#title' => t('Remove user entry from LDAP'),
          '#default_value' => variable_get('ldapregistration_delete_ldap_entries', LDAP_DEFAULT_DELETE_LDAP_ENTRIES),
        ),
      );
      array_splice($form, $offset, 0, $form_new_items);
      $form['#submit'] += array('ldapregistration_confirm_delete_submit' => array());
      break;
    
    case 'ldapauth_admin_form':
      $offset = array_search('submit', array_keys($form));
      $form_new_items = array (
        'ldap-registration' => array(
          '#type' => 'fieldset',
          '#title' => t('LDAP Registration'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          'registration-basedn' => array(
            '#type' => 'textfield',
            '#title' => t('Registration base DN'),
            '#default_value' => $edit['registration-basedn'],
            '#size' => 50,
            '#maxlength' => 255,
            '#description' => t('The Base DN to add users to. For example: ou=Users,dc=your 
                                 domain,dc=org')
          ),
        ),
      );
      array_splice($form, $offset, 0, $form_new_items);
      $form['#submit'] += array('ldapregistration_ldapauth_admin_form' => array());
      break;
  }
}

/**
 * Implements hook_user()
 * ldapregistration captures new user registration, as well as some info
 * (LDAP attributes) to display on the forms.
 */
function ldapregistration_user($op, &$edit, &$user, $category = NULL) {  
  // If this is a new user registration and user registrations to LDAP
  // are enabled, then add the user to LDAP
  $ldap_servers = variable_get('ldapregistration_register_servers', FALSE);
  if ($ldap_servers
        && $category == 'account'
        && $edit['name']
        && (!$edit['ldap_external_user'])) {

    switch ($op) {
      case 'validate':
        // validate is called first.
        // the LDAP directory must be checked in case the username
        // or e-mail is already in use by another user.
        ldapregistration_validate($edit);
        break;
      
      case 'insert':
        // save the user to the LDAP directory.
        ldapregistration_insert($edit);
        break;
    }
  }
}

/*********************************
 *     2. Delegate functions     *
 *********************************/

function ldapregistration_settings() {
  $form['ldap-servers'] = array(
    '#type' => 'fieldset',
    '#title' => t('LDAP servers'),
    '#description' => t('Select the LDAP servers where add the entry associated with
                         the new Drupal user accounts.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  // LDAP server selection.
  // Extracted from ldapdata.module::ldapauth_admin_list().
  $result = db_query("SELECT sid, name FROM {ldapauth} WHERE status = '%s' ORDER BY sid", 1);
  $ldap_servers = variable_get('ldapregistration_register_servers', LDAP_DEFAULT_REGISTER_SERVERS);
  while ($row = db_fetch_object($result)) {
      $form['ldap-servers']['entries'][$row->name] = array(
      $row->name.'-selector' => array(
        '#type' => 'checkbox',
        '#default_value' => in_array($row->name, $ldap_servers),
      ),
      $row->name.'-data' => array(
        '#type' => 'value',
        '#value' => array(
          $row->name,
          l(t('edit'), 'admin/settings/ldapdata/edit/'.$row->name),
          l(t('reset'), 'admin/settings/ldapdata/reset/'.$row->name),
        ),
      ),
    );
  }
  
  $form['ldap-servers']['header'] = array(
    '#type' => 'value',
    '#value' => array(
      t('LDAP Config'),
      array(
        'data' => t('Operations'),
        'colspan' => 2,
      ),
    ),
  );
  
  $form['system-wide-options'] = array(
    '#type' => 'fieldset',
    '#title' => t('System wide options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['system-wide-options']['ldap-objectclasses'] = array(
    '#type' => 'textfield',
    '#title' => t('Objectclasses'),
    '#default_value' => variable_get('ldapregistration_objectclasses', LDAP_DEFAULT_OBJECTCLASSES),
    '#size' => 50,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#description' => t('Default objectclasses for new LDAP user entries.')
  );
  
  $form['system-wide-options']['delete-ldap-entries'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove LDAP user entries'),
    '#default_value' => variable_get('ldapregistration_delete_ldap_entries', LDAP_DEFAULT_DELETE_LDAP_ENTRIES),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('If enabled, allow the module to remove the LDAP user entry when the
                         associated Drupal account was deleted.')
  );
  
  return system_settings_form($form);
}

function theme_ldapregistration_settings($form) {
  $output = '';
  
  $rows = array();
  foreach (element_children($form['ldap-servers']['entries']) as $key) {
    $value = $form['ldap-servers']['entries'][$key];
    
    $row = array();
    $row[] = drupal_render($value[$key.'-selector']);
    $row = array_merge($row, $value[$key.'-data']['#value']);
    
    $rows[] = $row;
  }

  $header = array('');
  $header = array_merge($header, $form['ldap-servers']['header']['#value']);
  $output .= theme('table', $header, $rows);
  
  $form['ldap-servers']['#children'] = $output;
  
  return drupal_render($form);
}

function ldapregistration_settings_submit($form_id, $form_values) {
  switch ($form_values['op']) {
    case $form_values['submit']:
      variable_set('ldapregistration_objectclasses', $form_values['ldap-objectclasses']);
      variable_set('ldapregistration_delete_ldap_entries', $form_values['delete-ldap-entries']);

      $ldap_servers = array();
      foreach (array_keys($form_values) as $key) {
        if (substr($key, -9) == '-selector') {
          $ldap_servers[] = substr($key, 0, strlen($key)-9);
        }
      }
      variable_set('ldapregistration_register_servers', $ldap_servers);

      drupal_set_message(t('The configuration options have been saved.'));
      break;

    case $form_values['reset']:
      variable_set('ldapregistration_objectclasses', LDAP_DEFAULT_OBJECTCLASSES);
      variable_set('ldapregistration_delete_ldap_entries', LDAP_DEFAULT_DELETE_LDAP_ENTRIES);
      variable_set('ldapregistration_register_servers', LDAP_DEFAULT_REGISTER_SERVERS);

      drupal_set_message(t('The configuration options have been reset to their default values.'));
      break;
  }
}

// For LDAP registration we must make sure the user does not already
// exist in some LDAP server directory. If so we need to return a
// username taken error.
function ldapregistration_validate(&$edit) {
  if ($edit['form_id'] == 'user_register') {
    $username = _ldapregistration_escape_username($edit['name']);
    
    $ldap_servers = variable_get('ldapregistration_register_servers', LDAP_DEFAULT_REGISTER_SERVERS);
    foreach($ldap_servers as $ldap_server) {
      _ldapauth_init($ldap_server);

      // Check for unique username.
      $ret = _ldapauth_user_lookup($username);
      if ($ret != 0) {
        watchdog('ldapregistration','username [' . $username .'] was already taken in
                  LDAP directory [' . $ldap_server .']!');
        form_set_error('name', t('The username %name is already taken in the central user directory.
                                  Please choose another.',
                                  array('%name' => theme('placeholder', $edit['name']))));
        break;
      }

      // TODO: Check for unique email address and any other unique fields required.
    }
  }
}

// When validation has succeeded, the user hook will be called with op=insert,
// category=account. At this point it is time for ldapregistration.module to
// insert a new user into the LDAP directory.
function ldapregistration_insert(&$edit) {
  global $ldapauth_ldap;
  
  $username = _ldapregistration_escape_username($edit['name']);

  $ldap_servers = variable_get('ldapregistration_register_servers', LDAP_DEFAULT_REGISTER_SERVERS);
  foreach($ldap_servers as $ldap_server) {
    _ldapauth_init($ldap_server);

    // see if the user exists!  If we are adding a user out of the central directory,
    // there is no need to re-insert him/her.
    $ret = _ldapauth_user_lookup($username);
    if ($ret != 0) {
      // add the user!
      // Now set up the $ldaprecord variable to hold the new user record
      $ldaprecord['cn'] = $username;
      
      // If the Store Encrypted Passwords box is checked, store the
      // password as an MD5 hash.  The hex value must also be Base64 encoded.
      // Otherwise, just write the password.
      $ldaprecord['userPassword'] = variable_get('ldap_store_encrypted_pass', false) ? '{md5}' . base64_encode(pack('H*', md5($pass))) : $pass;  			

      // The object class for inserting new users.  It is set to inetOrgPerson
      // TODO: Make the user schema and its required fields configurable.
      $ldaprecord['objectclass'][0] = "person";
      $ldaprecord['objectclass'][1] = "organizationalPerson";
      $ldaprecord['objectclass'][2] = "inetOrgPerson";

      $ldaprecord['sn'] = $sn;   // $sn is mandatory in the Person schema.

      // these values are optional fields in inetOrgPerson
      if ($mail) $ldaprecord['mail'] = $mail;
      if ($givenName) $ldaprecord['givenName'] = $givenName;
      if ($telephoneNumber) $ldaprecord['telephoneNumber'] = $telephoneNumber;
      
      // The DN (distinguished name) is the unique user identifier in LDAP
      // it should look something like this:  
      // cn=Username,ou=Users,dc=yourdomain,dc=org.
      // We construct that now using the DN from admin/settings/ldapregistration
      $dn = 'cn=' . $username . ','. variable_get('ldapregistration_base_dn', LDAP_DEFAULT_BASE_DN); 

      //watchdog('ldapregistration','About to do ldap add.  DN: [' . $dn . '], ldaprecord: [' . print_r($ldaprecord,TRUE) .'], password: [' . $pass . ']');
      $r = ldap_add($ldapauth_ldap->connection, $dn , $ldaprecord);

      if ($r === TRUE) {
        watchdog('ldapregistration','added User ' . $edit['name'] . ' to LDAP directory.  DN: ' . $dn);
        
        $edit['ldap_config'] = $ldap_server;
        $edit['ldap_authentified'] = TRUE;
        $edit['ldap_dn'] = $dn;
        $edit['dn'] = _ldapauth_login2dn($username); 							
      } else {
        watchdog('ldapregistration','error inserting LDAP user ' . $edit['name'] . ' (but connected OK!).  User not added to LDAP!  DN: ' . $dn . ', error: ' . $r);	
		  } 
	  } else {
		  watchdog('ldapregistration', 'User ' . $edit['name'] . ' already exists in LDAP directory, not adding.');	
	  }
  }
}

function ldapregistration_confirm_delete_submit($form_id, $form_values) {
}

function ldapregistration_ldapauth_admin_form($form_id, $form_values) {
}

function _ldapregistration_escape_username($user) {
  // RFC 2253
  /*$eqPos = strpos($user,"=");
  if ($eqPos === false) {
    return $user;
  } else {
    return strstr($user,0,$eqPos);  // strip off the equals and beyond
  }*/

  // TODO
  return $user;
}

?>